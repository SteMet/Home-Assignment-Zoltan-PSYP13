#####################
# Home Assignment 3 #
#####################

graphics.off()
rm(list=ls(all=TRUE))


library(psych) # for describe
library(dplyr) # for data management
library(gsheet) # to read data from google sheets
library(ggplot2) # for ggplot
library(lm.beta) # for lm.beta
library(car) # for scatter3d
library(rgl) # for scatter3d
library(cAIC4) # for cAIC
library(r2glmm) # for r2beta
library(reshape2) # for melt function
library(lme4) # for lmer
library(lmerTest) # to get singificance test in
library(influence.ME) # for influence
library(lattice) # for qqmath

# Get Data from Github
pain.data <- read.csv("https://raw.githubusercontent.com/kekecsz/PSYP13_Data_analysis_class-2018/master/home_sample_3.csv ") 


## Custom functions

# This is a function to extract standardized beta coefficients from linear mixed models.
# This function was adapted from: https://stackoverflow.com/questions/25142901/standardized-coefficients-for-lmer-model


stdCoef.merMod <- function(object) {
  sdy <- sd(getME(object,"y"))
  sdx <- apply(getME(object,"X"), 2, sd)
  sc <- fixef(object)*sdx/sdy
  se.fixef <- coef(summary(object))[,"Std. Error"]
  se <- se.fixef*sdx/sdy
  return(data.frame(stdcoef=sc, stdse=se))}

######################################################
# Take a look at the data in the beginning as always #
######################################################

View(pain.data)

# descriptive statistics
describe(pain.data) 
table(pain.data[,"sex"]) # looking at variable sex

# histograms for perceived pain from Day 1 to Day 4
hist(pain.data$pain1)
hist(pain.data$pain2)
hist(pain.data$pain3)
hist(pain.data$pain4)

# designate which are the repeated varibales
repeated_variables = c("pain1", "pain2", "pain3",	"pain4")

# correlation of repeated variables
cor(pain.data[,repeated_variables])

# convert paindata to long format
pain.data_long = melt(pain.data, measure.vars=repeated_variables, variable.name = "time", value.name = "pain_rating")

# order data frame by participant ID
pain.data_long = pain.data_long[order(pain.data_long[,"ID"]),]

# change the time variable to a numerical vector
pain.data_long$time = as.numeric(pain.data_long$time)

#######################
# Creating the models #
#######################
#fixed effects of age, sex, STAI, pain catastrophizing, mindfulness, serum cortisol, time (day of pain report), 
#and a random intercept for participant ID

## building linear mixed models
# create random intercept model
mod_int = lmer(pain_rating ~ time + age + sex + STAI_trait + pain_cat + mindfulness + cortisol_serum + (1|ID), data = pain.data_long)
#create random slope model
mod_slope = lmer(pain_rating ~ time + age + sex + STAI_trait + pain_cat + mindfulness + cortisol_serum + (time|ID), data = pain.data_long)

####################
# Comparing models #
####################
#create a new copy of the data object so that our long format data can remain unharmed

pain.datalong_withpreds = pain.data_long
pain.datalong_withpreds$pred_int = predict(mod_int)
pain.datalong_withpreds$pred_slope = predict(mod_slope)

# Plot random intercept model

ggplot(pain.datalong_withpreds, aes(y = pain_rating, x = time, group = ID))+
  geom_point(size = 3)+
  geom_line(color='blue', aes(y=pred_int, x=time))+
  facet_wrap( ~ ID, ncol = 5)

# Plot random slope and intercept model

ggplot(pain.datalong_withpreds, aes(y = pain_rating, x = time, group = ID))+
  geom_point(size = 3)+
  geom_line(color='green', aes(y=pred_slope, x=time))+
  facet_wrap( ~ ID, ncol = 5)

# For further comparison the cAIC scores are calculated as well as an ANOVA

cAIC(mod_int)$caic
cAIC(mod_slope)$caic

#anova(mod_int, mod_slope) # significant but cAIC values more accepted. They indicate identical values.

# Quadratic term of time is added to the random intercept model to account for non-linear relationship.

mod_int_quad = lmer(pain_rating ~ time + I(time^2) + age + sex + STAI_trait + pain_cat + mindfulness + cortisol_serum + (1|ID), data = pain.data_long)


# Adding the predictions to the new dataframe containing the other predicted values as well.
pain.datalong_withpreds$pred_int_quad = predict(mod_int_quad)


# Plot new model and compare with the random intercept model

pain.datalong_withpreds$pred_int_quad = predict(mod_int_quad)


plot_quad = ggplot(pain.datalong_withpreds, aes(y = pain_rating, x = time, group = ID))+
  geom_point(size = 3)+
  geom_line(color='red', aes(y=pred_int_quad, x=time))+
  facet_wrap( ~ ID, ncol = 5)


plot_quad

cAIC(mod_int)$caic
cAIC(mod_int_quad)$caic

anova(mod_int, mod_int_quad)

#removing the correlation of time and time^2. + refit of model

pain.datalong_centered_time = pain.data_long
pain.datalong_centered_time$time_centered = pain.datalong_centered_time$time - mean(pain.datalong_centered_time$time)

mod_int_quad = lmer(pain_rating ~ time_centered + I(time_centered^2) + age + sex + STAI_trait + pain_cat + mindfulness + cortisol_serum + (1|ID), data = pain.datalong_centered_time)

## Request the results

# Marginal R squared
r2beta(mod_int_quad, method = "nsj", data = pain.datalong_centered_time)
?r2beta

# Conditional AIC
cAIC(mod_int_quad)

# Model coefficients
summary(mod_int_quad)

# Confidence intervals for the coefficients
confint(mod_int_quad)

# standardized Betas
stdCoef.merMod(mod_int_quad)

########################################
# Model Diagnostics, Assumptions Check #
########################################

data_pain_long_with_resid = pain.datalong_centered_time
data_pain_long_with_resid$resid = residuals(mod_int_quad)

###########################
# 1: Influencial Outliers #
###########################

influence_observation = influence(mod_int_quad, obs = T)$alt.fixed  
influence_group = influence(mod_int_quad, group = "ID")$alt.fixed

boxplot(influence_observation[, "time_centered"])
boxplot(influence_observation[, "age"])
boxplot(influence_observation[, "sexmale"])
boxplot(influence_observation[, "STAI_trait"])
boxplot(influence_observation[, "pain_cat"])
boxplot(influence_observation[, "mindfulness"])
boxplot(influence_observation[, "cortisol_serum"])

# check coefficiants 
pred_names = colnames(influence_group)

par(mfrow=c(1, length(pred_names)))
for(i in 1:length(pred_names)){
  boxplot(influence_observation[,pred_names[i]], main = pred_names[i])
}

for(i in 1:length(pred_names)){
  boxplot(influence_group[,pred_names[i]], main = pred_names[i])
}
par(mfrow=c(1,1))

# the plot do not indicate extreme influencial outliers

################
# 2: Normality #
################

qqmath(mod_int_quad, id = 0.05)

qqmath(ranef(mod_int_quad))

################
# 3: Linearity #
################

# Scatterplot of the standardized residuals and the predicted values. 

plot(mod_int_quad, arg = "pearson")

plot(resid ~ time_centered, data = data_pain_long_with_resid) 
plot(resid ~ STAI_trait, data = data_pain_long_with_resid) 
plot(resid ~ mindfulness, data = data_pain_long_with_resid) 
plot(resid ~ cortisol_serum, data = data_pain_long_with_resid) 
plot(resid ~ sex, data = data_pain_long_with_resid) 
plot(resid ~ age, data = data_pain_long_with_resid) 
plot(resid ~ pain_cat, data = data_pain_long_with_resid) 
plot(resid ~ weight, data = data_pain_long_with_resid) 

#######################
# 4: Homoscedasticity #
#######################

plot(mod_int_quad, arg = "pearson")

homosced_mod = lm(data_pain_long_with_resid$resid^2 ~ data_pain_long_with_resid$ID)
summary(homosced_mod)

# caluclate interquartile range within each cluster
IQR_of_residuals_by_participant = sapply(split(data_pain_long_with_resid, f = data_pain_long_with_resid$ID), function(x) IQR(x$resid))

# rank ordering them
rank = rank(IQR_of_residuals_by_participant)

# adding rank to the dataframe containing the residuals
data_pain_long_with_resid$rank = rep(rank, each = length(repeated_variables))

# creating a vector of participant IDs ordered based on the rank, this will be used as labels
IDforplot = unique(data_pain_long_with_resid$ID[order(data_pain_long_with_resid$rank)])

# create the cyclone plot
ggplot(data_pain_long_with_resid, aes(y = resid, x = factor(rank), labels = ID))+
  geom_boxplot()+
  scale_x_discrete(labels=IDforplot)+
  coord_flip()

########################
# 5: Multicollinearity #
########################

pairs.panels(pain.datalong_centered_time[,c("time_centered", "age", "sex", "STAI_trait", "pain_cat", "mindfulness", "cortisol_serum")], col = "red", lm = T)

